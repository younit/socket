#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
const fs = require('fs')

const socket= require('socket.io')

const qn = require('../public/javascript/qiniu')

/**
 * Get port from environment and store in Express.
 */

 var server = http.createServer(app.callback());

 const io = socket(server);

 //监听socket连接
 io.on('connection', client => {

   //  接收客户端的数据--data
   client.on('client', (data) => {

    //  console.log('接收客户端的数据:', data)
    if (data.img) {
      let img = data.img
      let suffixName = img.match(/[^data:image\/]\w+[^;base]/)
      let base = img.replace(/^data:image\/\w+;base64,/, "")
      let dbuff = new Buffer.from(base, 'base64')
      let temporaryImg = new Date().getTime() + '.' + suffixName
      var p = function () {
      return new Promise((resolve,reject) => {
        fs.writeFile(temporaryImg, dbuff, function (err) {
          if (err) {
            reject(err)
          } else {
            resolve()
          }
        })
      })
    }
      p()

      qn.upImg(temporaryImg).then(res => {
        console.log('返回结果',res)
        data.res = res
        data.url = 'http://mziu.club/'
        client.broadcast.emit('serve', data)
      })
    } else {
        //  向客户端发送数据--data
      client.broadcast.emit('serve', data)
    }
   })
 })
 
var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
